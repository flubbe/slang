import std;

fn main(args: [str]) -> i32 {
    /*
     * i32.
     */

    // +, -, *, /
    std::assert(1 + 2 == 3, "1 + 2 == 3");
    std::assert(1 - 2 == -1, "1 - 2 == -1");
    std::assert(-1 + 2 == 1, "-1 + 2 == 1");
    std::assert(3 * 5 == 15, "3 * 5 == 15");
    std::assert(-3 * 5 == -15, "-3 * 5 == -15");
    std::assert(-3 * -5 == 15, "-3 * -5 == 15");
    std::assert(3 * -5 == -15, "3 * -5 == -15");
    std::assert(3 / 5 == 0, "3 / 5 == 0");
    std::assert(5 / 3 == 1, "5 / 3 == 1");

    // & | %
    std::assert((12 & 8) == 8, "(12 & 8) == 8");
    std::assert((12 & -8) == 8, "(12 & -8) == 8");
    std::assert((-12 & 8) == 0, "(-12 & 8) == 0");
    std::assert((-12 & -8) == -16, "(-12 & -8) == -16");
    std::assert((12 | 2) == 14, "(12 | 2) == 14");
    std::assert((12 | -2) == -2, "(12 | -2) == -2");
    std::assert((-12 | 2) == -10, "(-12 | 2) == -10");
    std::assert((-12 | -2) == -2, "(-12 | -2) == -2");
    std::assert(17 % 3 == 2, "17 % 3 == 2");
    std::assert(17 % -3 == 2, "17 % -3 == 2");
    std::assert(-17 % 3 == -2, "-17 % 3 == -2");
    std::assert(-17 % -3 == -2, "-17 % -3 == -2");

    // unary +, -, !
    std::assert(-123 == 0 - 123, "-123 == 0 - 123");
    std::assert(+321 == 0 + 321, "+321 == 0 + 321");
    std::assert(!0 == 1, "!0 == 1");
    std::assert(!1 == 0, "!1 == 0");
    std::assert(!123 == 0, "!123 == 0");
    std::assert(!!123 == 1, "!!123 == 1");

    std::assert(-!!123 == -1, "-!!123 == -1");
    std::assert(!-!123 == 1, "!-!123 == 1");
    std::assert(!!-123 == 1, "!!-123 == 1");

    /*
     * f32.
     */

    // +, -, *, /
    std::assert(1.0 + 2.0 == 3.0, "1.0 + 2.0 == 3.0");
    std::assert(1.0 - 2.0 == -1.0, "1.0 - 2.0 == -1.0");
    std::assert(-1.0 + 2.0 == 1.0, "-1.0 + 2.0 == 1.0");
    std::assert(3.0 * 5.0 == 15.0, "3.0 * 5.0 == 15.0");
    std::assert(-3.0 * 5.0 == -15.0, "-3.0 * 5.0 == -15.0");
    std::assert(-3.0 * -5.0 == 15.0, "-3.0 * -5.0 == 15.0");
    std::assert(3.0 * -5.0 == -15.0, "3.0 * -5.0 == -15.0");
    std::assert(3.0 / 5.0 == 0.6, "3.0 / 5.0 == 0.6");
    std::assert(5.0 / 3.0 == 1.6666666, "5.0 / 3.0 == 1.6666666");

    // unary +, -
    std::assert(-123.0 == 0.0 - 123.0, "-123.0 == 0.0 - 123.0");
    std::assert(+321.0 == 0.0 + 321.0, "+321.0 == 0.0 + 321.0");

    return 0;
}
